#!/usr/bin/python

import sys
import json
import csv
import urllib2
import base64
import traceback
import ConfigParser

def createRangerKMSPolicies(fileObj):
		config = ConfigParser.RawConfigParser()
		config.read(sys.argv[1])
		clusterName = config.get('RangerImport','cluster.name')
		kmsServiceName = config.get('RangerImport','kms.service.name')
		rangerKMSServer = config.get('RangerImport','ranger.kms.url')
		rangerKMSUser = config.get('RangerImport','ranger.kms.username')
		rangerKMSPasswd = config.get('RangerImport','ranger.kms.password')
		
		kmsURL = rangerKMSServer + "/service/public/v2/api/policy"
		authEncodeString = rangerKMSUser + ":" + rangerKMSPasswd
		failedPolsFile = open("failed_kms_policies.txt","w")
		with open(fileObj,"r") as policyRawFile:
				has_header = csv.Sniffer().has_header(policyRawFile.read(1024))
				policyRawFile.seek(0)
				if has_header:
							policyRawFile.next()
				reader = csv.reader(policyRawFile)
				for row in reader:
							eZone = row[0].rsplit("/",1)[1].strip()
							# policyName = clusterName.lower().strip() + "-pol-hdfs_" + eZone
							description = "KMS policy for encryption zone " + eZone
							keyName = row[1].strip()
							policyName = keyName

							data = { "name": policyName, "service": kmsServiceName.strip(), "description": description, "isEnabled": "true", "isAuditEnabled": "true", "createdBy":"hdp2.4_upgrade_script","resources":{"keyname":{"values":[keyName],"isExcludes":"false","isRecursive":"false"}},"policyItems": []}
							roGroups = row[3].strip().split()
							rwGroups = row[5].strip().split()
							roGroupCount = len(roGroups)
							rwGroupCount = len(rwGroups)

							for writeOnlyGroup in rwGroups:
									data["policyItems"].append({"groups": [writeOnlyGroup], "accesses": [{"isAllowed": "true","type": "generateeek"},{"isAllowed": "true","type": "decrypteek"},{"isAllowed": "true","type": "getmetadata"}],"delegateAdmin": "false"})
							for readOnlyGroup in roGroups:
									data["policyItems"].append({"groups": [readOnlyGroup], "accesses": [{"isAllowed": "true","type": "decrypteek"},{"isAllowed": "true","type": "getmetadata"}],"delegateAdmin": "false"},)

							try:
									restReq = urllib2.Request(kmsURL)
									restReq.add_header('Content-Type','application/json')
									base64Str = base64.b64encode(authEncodeString)
									restReq.add_header("Authorization", "Basic %s" % base64Str)
									restResp = urllib2.urlopen(restReq,json.dumps(data))
							except urllib2.HTTPError as httpError:
									print "Failed processing policy for " + row[0]
									#failedPolsFile.write(row[0])
									print >>failedPolsFile, row[0]
									print "Received \"" + str(httpError) + "\" response from Ranger KMS API call"
									pass
							except urllib2.URLError as urlError:
									print "Failed processing policy for "  + row[0]
									#failedPolsFile.write(row[0])
									print >>failedPolsFile, row[0]
									print "Problem while connecting to Ranger KMS REST API. Please process the record manually"
									print str(urlError)
									pass
							except Exception:
									print "iUnexpected Error. Failed processing policy for " + row[0]
									print >>failedPolsFile, row[0]
									#failedPolsFile.write(row[0])
									print sys.exc_info()[0]
									pass
		failedPolsFile.close()

print "Usage python pythonRangerImport.py <Properties File Path> <CSV File Path>"
createRangerKMSPolicies(sys.argv[2])
